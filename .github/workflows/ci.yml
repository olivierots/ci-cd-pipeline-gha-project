name: Terraform CI with Versioning

on:
  pull_request:
    paths:
      - 'modules/**'
      - '.github/**'
      - 'scripts/**'
  push:
    paths:
      - 'modules/**'
      - '.github/**'
      - 'scripts/**'

jobs:
  # 1) Detect Changed Modules
  detect:
    name: ðŸ”€ Detect Changed Modules
    runs-on: ubuntu-latest
    outputs:
      modules_json_list: ${{ steps.detect.outputs.modules_json_list }}
      full_ci: ${{ steps.detect.outputs.full_ci }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - id: detect
        run: |
          git fetch origin main
          files=$(git diff --name-only origin/main...HEAD)

          # Detect changed modules
          all_modules=$(ls modules)
          all_json=$(printf '%s\n' $all_modules \
                  | jq --raw-input . \
                  | jq --slurp . \
                  | jq -c .)

          changed=$(git diff --name-only origin/main...HEAD -- modules \
                  | grep -E 'modules/.*/' \
                  | cut -d/ -f2 \
                  | uniq)

          # Emit modules_json_list
          if [[ -n "$changed" ]]; then
            echo "modules_json_list=$(printf '%s\n' $changed \
                  | jq --raw-input . \
                  | jq --slurp . \
                  | jq -c .)" >> $GITHUB_OUTPUT
          else
            # If anything else changed, run full CI; otherwise skip
            other_changes=$(git diff --name-only origin/main...HEAD -- .github scripts | wc -l)
            if (( other_changes > 0 )); then
              echo "modules_json_list=$all_json" >> $GITHUB_OUTPUT
            else
              echo "modules_json_list=[]" >> $GITHUB_OUTPUT
            fi
          fi

          # Detect if full CI is needed
          other_changes=$(git diff --name-only origin/main...HEAD -- .github scripts | wc -l)
          if [[ $other_changes -gt 0 ]]; then
            echo "full_ci=true" >> $GITHUB_OUTPUT
          else
            echo "full_ci=false" >> $GITHUB_OUTPUT
          fi

      - name: Debug Outputs
        run: |
          echo "Modules JSON List: ${{ steps.detect.outputs.modules_json_list }}"
          echo "Full CI: ${{ steps.detect.outputs.full_ci }}"

  # 2) Run CI Tests for Changed Modules
  ci-tests:
    name: Run CI Tests
    needs: detect
    if: ${{ needs.detect.outputs.full_ci == 'true' || needs.detect.outputs.modules_json_list != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        module_name: ${{ fromJSON(needs.detect.outputs.modules_json_list || '["none"]') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Debug matrix.module_name
        run: 'echo "Module name: ${{ matrix.module_name }}"'

      - name: Skip if no modules
        if: ${{ matrix.module_name == 'none' }}
        run: echo "No modules to process. Skipping CI tests."

      - name: Setup Terraform
        if: ${{ matrix.module_name != 'none' }}
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.7'

      - name: Install TFLint
        if: ${{ matrix.module_name != 'none' }}
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash

      - name: Run Terraform fmt
        if: ${{ matrix.module_name != 'none' }}
        run: terraform fmt -check -recursive modules/${{ matrix.module_name }}

      - name: Run Terraform validate
        if: ${{ matrix.module_name != 'none' }}
        run: |
          terraform -chdir=modules/${{ matrix.module_name }}/examples/dev init -backend=false
          terraform -chdir=modules/${{ matrix.module_name }}/examples/dev validate

      - name: Run TFLint
        if: ${{ matrix.module_name != 'none' }}
        run: tflint --chdir=modules/${{ matrix.module_name }} --init

      - name: Run tfsec
        if: ${{ matrix.module_name != 'none' }}
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: modules/${{ matrix.module_name }}
          soft_fail: true
          
  # 3) Determine Module Versions
  versioning:
    name: Determine Module Versions
    needs: ci-tests
    if: ${{ needs.detect.outputs.full_ci == 'true' || needs.detect.outputs.modules_json_list != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        module_name: ${{ fromJSON(needs.detect.outputs.modules_json_list || '["none"]') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Skip if no modules
        if: ${{ matrix.module_name == 'none' }}
        run: echo "No modules to process. Skipping versioning."

      - name: Install GitVersion
        if: ${{ matrix.module_name != 'none' }}
        uses: gittools/actions/gitversion/setup@v3.2.1
        with:
          versionSpec: '6.2.x'

      - id: determine_version
        if: ${{ matrix.module_name != 'none' }}
        name: Determine Version
        uses: gittools/actions/gitversion/execute@v3.2.1
        with:
          overrideConfig: |
            tag-prefix=${{ matrix.module_name }}-

      - name: Debug Module Version
        if: ${{ matrix.module_name != 'none' }}
        run: 'echo "Module: ${{ matrix.module_name }}, Version: ${{ steps.determine_version.outputs.MajorMinorPatch }}"'