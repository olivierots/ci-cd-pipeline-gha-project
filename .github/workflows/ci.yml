name: Terraform CI — Dynamic Modules

# Trigger on any PR or push so we can diff against main
on:
  pull_request:
    types: [opened, reopened, synchronize]
  push:

jobs:
  # 1) Detect what changed
  detect:
    name: 🔀 What changed?
    runs-on: ubuntu-latest
    outputs:
      s3_bucket:     ${{ steps.detect.outputs.s3_bucket }}
      ssm_parameter: ${{ steps.detect.outputs.ssm_parameter }}
      full_ci:       ${{ steps.detect.outputs.other }}
    steps:
      - name: Checkout code (full history)
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Detect changes vs main
        id: detect
        shell: bash
        run: |
          git fetch origin main
          files=$(git diff --name-only origin/main...HEAD)

          s3=false; ssm=false
          for f in $files; do
            [[ $f == modules/s3_bucket/*    ]] && s3=true
            [[ $f == modules/ssm_parameter/* ]] && ssm=true
            [[ $f != modules/s3_bucket/* && $f != modules/ssm_parameter/* ]] && other=true
          done

          other=false
          if [[ $s3 == "false" && $ssm == "false" ]]; then
            other=true
          fi

          echo "s3_bucket=$s3"     >> $GITHUB_OUTPUT
          echo "ssm_parameter=$ssm" >> $GITHUB_OUTPUT
          echo "other=$other"       >> $GITHUB_OUTPUT

      - name: Show results
        run: |
          echo "→ s3_bucket changed?     ${{ steps.detect.outputs.s3_bucket }}"
          echo "→ ssm_parameter changed? ${{ steps.detect.outputs.ssm_parameter }}"
          echo "→ run full CI?           ${{ steps.detect.outputs.other }}"

      - name: Debug detected changes
        run: |
            echo "s3_bucket: ${{ steps.detect.outputs.s3_bucket }}"
            echo "ssm_parameter: ${{ steps.detect.outputs.ssm_parameter }}"
            echo "other: ${{ steps.detect.outputs.other }}"

  # 2) fmt → modules/s3_bucket
  fmt-s3:
    name: 🖨️ fmt → s3_bucket
    needs: detect
    runs-on: ubuntu-latest
    if: needs.detect.outputs.s3_bucket == 'true' || needs.detect.outputs.full_ci == 'true'
    steps:
      - uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.7'
      - name: terraform fmt (modules/s3_bucket)
        run: terraform fmt -check -recursive modules/s3_bucket

  # 3) fmt → modules/ssm_parameter
  fmt-ssm:
    name: 🖨️ fmt → ssm_parameter
    needs: detect
    runs-on: ubuntu-latest
    if: needs.detect.outputs.ssm_parameter == 'true' || needs.detect.outputs.full_ci == 'true'
    steps:
      - uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.7'
      - name: terraform fmt (modules/ssm_parameter)
        run: terraform fmt -check -recursive modules/ssm_parameter

  # 4) validate → modules/s3_bucket
  validate-s3:
    name: ✅ validate → s3_bucket
    needs: [detect, fmt-s3]
    runs-on: ubuntu-latest
    if: needs.detect.outputs.s3_bucket == 'true' || needs.detect.outputs.full_ci == 'true'
    steps:
      - uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.7'
      - name: Init & validate example (s3_bucket)
        run: |
          terraform -chdir=modules/s3_bucket/examples/dev init -backend=false
          terraform -chdir=modules/s3_bucket/examples/dev validate
      - name: Init & validate module (s3_bucket)
        run: |
          terraform -chdir=modules/s3_bucket init -backend=false
          terraform -chdir=modules/s3_bucket validate

  # 5) validate → modules/ssm_parameter
  validate-ssm:
    name: ✅ validate → ssm_parameter
    needs: [detect, fmt-ssm]
    runs-on: ubuntu-latest
    if: needs.detect.outputs.ssm_parameter == 'true' || needs.detect.outputs.full_ci == 'true'
    steps:
      - uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.7'
      - name: Init & validate example (ssm_parameter)
        run: |
          terraform -chdir=modules/ssm_parameter/examples/dev init -backend=false
          terraform -chdir=modules/ssm_parameter/examples/dev validate
      - name: Init & validate module (ssm_parameter)
        run: |
          terraform -chdir=modules/ssm_parameter init -backend=false
          terraform -chdir=modules/ssm_parameter validate

  # 6) lint → modules/s3_bucket
  lint-s3:
    name: 🔍 TFLint → s3_bucket
    needs: validate-s3
    runs-on: ubuntu-latest
    if: needs.detect.outputs.s3_bucket == 'true' || needs.detect.outputs.full_ci == 'true'
    steps:
      - uses: actions/checkout@v3
      - name: Install TFLint
        run: curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
      - name: tflint (modules/s3_bucket)
        run: tflint --chdir=modules/s3_bucket --init

  # 7) lint → modules/ssm_parameter
  lint-ssm:
    name: 🔍 TFLint → ssm_parameter
    needs: validate-ssm
    runs-on: ubuntu-latest
    if: needs.detect.outputs.ssm_parameter == 'true' || needs.detect.outputs.full_ci == 'true'
    steps:
      - uses: actions/checkout@v3
      - name: Install TFLint
        run: curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
      - name: tflint (modules/ssm_parameter)
        run: tflint --chdir=modules/ssm_parameter --init

  # 8) tfsec → modules/s3_bucket
  tfsec-s3:
    name: 🔒 tfsec → s3_bucket
    needs: lint-s3
    runs-on: ubuntu-latest
    if: needs.detect.outputs.s3_bucket == 'true' || needs.detect.outputs.full_ci == 'true'
    steps:
      - uses: actions/checkout@v3
      - name: tfsec (modules/s3_bucket)
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: modules/s3_bucket
          soft_fail: true

  # 9) tfsec → modules/ssm_parameter
  tfsec-ssm:
    name: 🔒 tfsec → ssm_parameter
    needs: lint-ssm
    runs-on: ubuntu-latest
    if: needs.detect.outputs.ssm_parameter == 'true' || needs.detect.outputs.full_ci == 'true'
    steps:
      - uses: actions/checkout@v3
      - name: tfsec (modules/ssm_parameter)
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: modules/ssm_parameter
          soft_fail: true
