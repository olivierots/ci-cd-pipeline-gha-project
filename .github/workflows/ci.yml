name: Terraform CI with Versioning

on:
  pull_request:
    paths:
      - 'modules/**'
      - '.github/**'
      - 'scripts/**'
  push:
    paths:
      - 'modules/**'
      - '.github/**'
      - 'scripts/**'

jobs:
  # 1) Detect Changed Modules
  detect:
    name: ðŸ”€ Detect Changed Modules
    runs-on: ubuntu-latest
    outputs:
      modules_json_list: ${{ steps.detect.outputs.modules_json_list }}
      full_ci: ${{ steps.detect.outputs.full_ci }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - id: detect
        run: |
          git fetch origin main
          files=$(git diff --name-only origin/main...HEAD)

          # Detect changed modules
          changed_modules=$(git diff --name-only origin/main...HEAD -- modules | grep -E 'modules/.*/' | cut -d/ -f2 | uniq)
          echo "modules_json_list=$(echo "$changed_modules" | jq --raw-input . | jq --slurp . | jq -c .)" >> $GITHUB_OUTPUT

          # Detect if full CI is needed
          other_changes=$(git diff --name-only origin/main...HEAD -- .github scripts | wc -l)
          if [[ $other_changes -gt 0 ]]; then
            echo "full_ci=true" >> $GITHUB_OUTPUT
          else
            echo "full_ci=false" >> $GITHUB_OUTPUT
          fi

      - name: Debug Outputs
        run: |
          echo "Modules JSON List: ${{ steps.detect.outputs.modules_json_list }}"
          echo "Full CI: ${{ steps.detect.outputs.full_ci }}"

  # 2) Run CI Tests for Changed Modules
  ci-tests:
    name: Run CI Tests
    needs: detect
    runs-on: ubuntu-latest
    strategy:
      matrix:
        module_name: ${{ fromJSON(needs.detect.outputs.modules_json_list) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.7'

      - name: Debug matrix.module_name
        run: echo "Module name: ${{ matrix.module_name }}"

      - name: Run Terraform fmt
        run: terraform fmt -check -recursive modules/${{ matrix.module_name }}

      - name: Run Terraform validate
        run: |
          terraform -chdir=modules/${{ matrix.module_name }}/examples/dev init -backend=false
          terraform -chdir=modules/${{ matrix.module_name }}/examples/dev validate

      - name: Run TFLint
        run: tflint --chdir=modules/${{ matrix.module_name }} --init

      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: modules/${{ matrix.module_name }}
          soft_fail: true

  # 3) Determine Module Versions
  versioning:
    name: Determine Module Versions
    needs: ci-tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        module_name: ${{ fromJSON(needs.detect.outputs.modules_json_list) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v3.2.1
        with:
          versionSpec: '6.2.x'

      - name: Determine Version
        uses: gittools/actions/gitversion/execute@v3.2.1
        with:
          overrideConfig: |
            tag-prefix=${{ matrix.module_name }}-

      - name: Debug Module Version
        run: echo "Module: ${{ matrix.module_name }}, Version: ${{ steps.Determine Version.outputs.MajorMinorPatch }}"