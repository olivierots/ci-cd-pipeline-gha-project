name: Terraform CI with Versioning

on:
  pull_request:
    paths:
      - 'modules/**'
      - '.github/**'
      - 'scripts/**'
  push:
    paths:
      - 'modules/**'
      - '.github/**'
      - 'scripts/**'

jobs:
  # 1) Detect Changed Modules #
  detect:
    name: ðŸ”€ Detect Changed Modules
    runs-on: ubuntu-latest
    outputs:
      modules_json_list: ${{ steps.detect.outputs.modules_json_list }}
      full_ci:             ${{ steps.detect.outputs.full_ci }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - id: detect
        run: |
          git fetch origin main

          # 1) All modules as JSON array (for full-CI override)
          all_json=$(ls modules | jq --raw-input . | jq --slurp . -c)

          # 2) Which top-level modules actually changed?
          changed=$(git diff --name-only origin/main...HEAD -- modules \
                   | grep -E '^modules/[^/]+/' \
                   | cut -d/ -f2 \
                   | sort -u)

          # 3) Did we touch CI or scripts?  (full-CI override)
          other_changes=$(git diff --name-only origin/main...HEAD -- .github scripts | wc -l)

          if (( other_changes > 0 )); then
            # any CI/scripts edits â†’ run *all* modules
            echo "modules_json_list=$all_json" >> $GITHUB_OUTPUT
          elif [[ -n "$changed" ]]; then
            # only the truly changed modules
            echo "modules_json_list=$(printf '%s\n' $changed \
                   | jq --raw-input . | jq --slurp . -c)" \
                 >> $GITHUB_OUTPUT
          else
            # nothing to do
            echo "modules_json_list=[]" >> $GITHUB_OUTPUT
          fi

          # emit a human-friendly full_ci flag too
          if (( other_changes > 0 )); then
            echo "full_ci=true"  >> $GITHUB_OUTPUT
          else
            echo "full_ci=false" >> $GITHUB_OUTPUT
          fi

      - name: Debug Outputs
        run: |
          echo "Modules JSON List: ${{ steps.detect.outputs.modules_json_list }}"
          echo "Full CI:             ${{ steps.detect.outputs.full_ci }}"

      - name: Debug Changed Files
        run: |
          echo "Changed files:"
          git diff --name-only origin/main...HEAD
          echo "Detected changed modules: $changed"

  # 2) Run CI Tests for Changed Modules #
  ci-tests:
    name: Run CI Tests
    needs: detect
    if: ${{ needs.detect.outputs.modules_json_list != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        module_name: ${{ fromJSON(needs.detect.outputs.modules_json_list) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Debug matrix.module_name
        run: 'echo "Module name: ${{ matrix.module_name }}"'

      - name: Skip if no modules
        if: ${{ matrix.module_name == 'none' }}
        run: echo "No modules to process. Skipping CI tests."

      - name: Setup Terraform
        if: ${{ matrix.module_name != 'none' }}
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.7'

      - name: Install TFLint
        if: ${{ matrix.module_name != 'none' }}
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash

      - name: Run Terraform fmt
        if: ${{ matrix.module_name != 'none' }}
        run: terraform fmt -check -recursive modules/${{ matrix.module_name }}

      - name: Run Terraform validate
        if: ${{ matrix.module_name != 'none' }}
        run: |
          terraform -chdir=modules/${{ matrix.module_name }}/examples/dev init -backend=false
          terraform -chdir=modules/${{ matrix.module_name }}/examples/dev validate

      - name: Run TFLint
        if: ${{ matrix.module_name != 'none' }}
        run: tflint --chdir=modules/${{ matrix.module_name }} --init

      - name: Run tfsec
        if: ${{ matrix.module_name != 'none' }}
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: modules/${{ matrix.module_name }}
          soft_fail: true

  # 3) Determine Module Versions #
  versioning:
  name: Determine & Tag Module Versions
  needs: ci-tests
  if: ${{ needs.detect.outputs.modules_json_list != '[]' }}
  runs-on: ubuntu-latest
  strategy:
    fail-fast: false
    matrix:
      module_name: ${{ fromJSON(needs.detect.outputs.modules_json_list) }}
  steps:
    - name: Checkout full history
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v3.2.1
      with:
        versionSpec: '6.2.x'

    - id: determine_version
      name: Determine Version
      uses: gittools/actions/gitversion/execute@v3.2.1
      with:
        overrideConfig: |
          tag-prefix=${{ matrix.module_name }}-

    - name: Debug Module Version
      run: |
        echo ">> Module: ${{ matrix.module_name }}"
        echo ">> Version: ${{ steps.determine_version.outputs.MajorMinorPatch }}"

    - name: Create & push Git tag
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        VERSION=${{ steps.determine_version.outputs.MajorMinorPatch }}
        TAG="${{ matrix.module_name }}-${VERSION}"
        git tag -a "$TAG" -m "Release $TAG"
        git push origin "$TAG"
        echo "Created and pushed tag: $TAG"

      
