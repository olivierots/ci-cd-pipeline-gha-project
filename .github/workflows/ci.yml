# .github/workflows/ci.yml
name: Terraform CI

# Trigger on any push or PR touches anything
on:
  pull_request:
    types: [opened, reopened, synchronize]
    paths:
      - '**'
  push:
    paths:
      - '**'

jobs:
  # 1) Figure out which paths changed
  filter:
    name: 🔀 Path filter
    runs-on: ubuntu-latest
    outputs:
      s3:    ${{ steps.filter.outputs.s3_bucket }}
      ssm:   ${{ steps.filter.outputs.ssm_parameter }}
      other: ${{ steps.filter.outputs.unmatched }}
    steps:
      - uses: actions/checkout@v3
      - id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            s3_bucket:
              - 'modules/s3_bucket/**'
            ssm_parameter:
              - 'modules/ssm_parameter/**'
            unmatched:
              - '**'
              - '!modules/s3_bucket/**'
              - '!modules/ssm_parameter/**'

  # 2) terraform fmt → modules/s3_bucket
  fmt-s3:
    name: 🖨️ fmt → s3_bucket
    needs: filter
    runs-on: ubuntu-latest
    if: needs.filter.outputs.s3 == 'true' || needs.filter.outputs.other == 'true'
    steps:
      - uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with: { terraform_version: '1.5.7' }
      - name: terraform fmt (s3)
        run: terraform fmt -check -recursive modules/s3_bucket

  # 3) terraform fmt → modules/ssm_parameter
  fmt-ssm:
    name: 🖨️ fmt → ssm_parameter
    needs: filter
    runs-on: ubuntu-latest
    if: needs.filter.outputs.ssm == 'true' || needs.filter.outputs.other == 'true'
    steps:
      - uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with: { terraform_version: '1.5.7' }
      - name: terraform fmt (ssm)
        run: terraform fmt -check -recursive modules/ssm_parameter

  # 4) terraform validate → modules/s3_bucket
  validate-s3:
    name: ✅ validate → s3_bucket
    needs: fmt-s3
    runs-on: ubuntu-latest
    if: needs.filter.outputs.s3 == 'true' || needs.filter.outputs.other == 'true'
    steps:
      - uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with: { terraform_version: '1.5.7' }
      - name: Init & validate examples/dev
        run: |
          terraform -chdir=modules/s3_bucket/examples/dev init   -backend=false
          terraform -chdir=modules/s3_bucket/examples/dev validate
      - name: Init & validate module root
        run: |
          terraform -chdir=modules/s3_bucket init   -backend=false
          terraform -chdir=modules/s3_bucket validate

  # 5) terraform validate → modules/ssm_parameter
  validate-ssm:
    name: ✅ validate → ssm_parameter
    needs: fmt-ssm
    runs-on: ubuntu-latest
    if: needs.filter.outputs.ssm == 'true' || needs.filter.outputs.other == 'true'
    steps:
      - uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with: { terraform_version: '1.5.7' }
      - name: Init & validate examples/dev
        run: |
          terraform -chdir=modules/ssm_parameter/examples/dev init   -backend=false
          terraform -chdir=modules/ssm_parameter/examples/dev validate
      - name: Init & validate module root
        run: |
          terraform -chdir=modules/ssm_parameter init   -backend=false
          terraform -chdir=modules/ssm_parameter validate

  # 6) TFLint → modules/s3_bucket
  lint-s3:
    name: 🔍 TFLint → s3_bucket
    needs: validate-s3
    runs-on: ubuntu-latest
    if: needs.filter.outputs.s3 == 'true' || needs.filter.outputs.other == 'true'
    steps:
      - uses: actions/checkout@v3
      - name: Install TFLint
        run: curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
      - name: TFLint (module root)
        run: tflint --chdir=modules/s3_bucket --init

  # 7) TFLint → modules/ssm_parameter
  lint-ssm:
    name: 🔍 TFLint → ssm_parameter
    needs: validate-ssm
    runs-on: ubuntu-latest
    if: needs.filter.outputs.ssm == 'true' || needs.filter.outputs.other == 'true'
    steps:
      - uses: actions/checkout@v3
      - name: Install TFLint
        run: curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
      - name: TFLint (module root)
        run: tflint --chdir=modules/ssm_parameter --init

  # 8) tfsec → modules/s3_bucket
  tfsec-s3:
    name: 🔒 tfsec → s3_bucket
    needs: lint-s3
    runs-on: ubuntu-latest
    if: needs.filter.outputs.s3 == 'true' || needs.filter.outputs.other == 'true'
    steps:
      - uses: actions/checkout@v3
      - name: tfsec scan
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: modules/s3_bucket
          soft_fail: true

  # 9) tfsec → modules/ssm_parameter
  tfsec-ssm:
    name: 🔒 tfsec → ssm_parameter
    needs: lint-ssm
    runs-on: ubuntu-latest
    if: needs.filter.outputs.ssm == 'true' || needs.filter.outputs.other == 'true'
    steps:
      - uses: actions/checkout@v3
      - name: tfsec scan
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: modules/ssm_parameter
          soft_fail: true
