# Terraform CI Pipeline
# This pipeline dynamically runs CI jobs (fmt, validate, lint, tfsec) for Terraform configurations.
# It detects changes in `modules` and `examples/dev` and runs jobs only for the changed directories.
# If changes are detected in both directories, it runs the jobs for both.

name: Terraform CI

# Triggers the workflow on pull requests or pushes affecting `modules` or `examples/dev`.
on:
  pull_request:
    types: [opened, reopened, synchronize]
    paths:
      - 'modules/**'
      - 'examples/dev/**'
  push:
    branches:
      - 'main'
      - 'feature/**'
    paths:
      - 'modules/**'
      - 'examples/dev/**'

jobs:
  # Detect which directories changed
  filter:
    name: üîÄ Path filter
    runs-on: ubuntu-latest
    outputs:
      modules: ${{ steps.filter.outputs.modules }}
      examples: ${{ steps.filter.outputs.examples }}
    steps:
      - uses: actions/checkout@v3
      - id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            modules:
              - 'modules/**'
            examples:
              - 'examples/dev/**'

  # Run terraform fmt for modules
  fmt-modules:
    name: üñ®Ô∏è fmt ‚Üí modules
    needs: filter
    runs-on: ubuntu-latest
    if: needs.filter.outputs.modules == 'true' # Only run if changes were detected in the modules directory
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.7'
      - name: terraform fmt (modules)
        run: terraform fmt -check -recursive modules

  # Run terraform fmt for examples/dev
  fmt-examples:
    name: üñ®Ô∏è fmt ‚Üí examples/dev
    needs: filter
    runs-on: ubuntu-latest
    if: needs.filter.outputs.examples == 'true' # Only run if changes were detected in the examples/dev directory
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.7'
      - name: terraform fmt (examples/dev)
        run: terraform fmt -check -recursive examples/dev

  # Validate Terraform configurations for modules
  validate-modules:
    name: ‚úÖ validate ‚Üí modules
    needs: [filter, fmt-modules]
    runs-on: ubuntu-latest
    if: needs.filter.outputs.modules == 'true' # Only run if changes were detected in the modules directory
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.7'
      - name: Init & validate (modules)
        run: |
          cd modules
          terraform init -backend=false
          terraform validate

  # Validate Terraform configurations for examples/dev
  validate-examples:
    name: ‚úÖ validate ‚Üí examples/dev
    needs: [filter, fmt-examples]
    runs-on: ubuntu-latest
    if: needs.filter.outputs.examples == 'true' # Only run if changes were detected in the examples/dev directory
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.7'
      - name: Init & validate (examples/dev)
        run: |
          cd examples/dev
          terraform init -backend=false
          terraform validate

  # Lint Terraform code using TFLint
  lint-modules:
    name: üîç TFLint ‚Üí modules
    needs: [filter, validate-modules]
    runs-on: ubuntu-latest
    if: needs.filter.outputs.modules == 'true' # Only run if changes were detected in the modules directory
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install TFLint
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
      - name: TFLint init
        run: tflint --init
      - name: Lint modules
        run: tflint --chdir=modules

  lint-examples:
    name: üîç TFLint ‚Üí examples/dev
    needs: [filter, validate-examples]
    runs-on: ubuntu-latest
    if: needs.filter.outputs.examples == 'true' # Only run if changes were detected in the examples/dev directory
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install TFLint
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
      - name: TFLint init
        run: tflint --init
      - name: Lint examples/dev
        run: tflint --chdir=examples/dev

  # Perform a security scan using tfsec
  tfsec-modules:
    name: üîí tfsec ‚Üí modules
    needs: [filter, validate-modules]
    runs-on: ubuntu-latest
    if: needs.filter.outputs.modules == 'true' # Only run if changes were detected in the modules directory
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Run tfsec for modules
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: modules
          soft_fail: true

  tfsec-examples:
    name: üîí tfsec ‚Üí examples/dev
    needs: [filter, validate-examples]
    runs-on: ubuntu-latest
    if: needs.filter.outputs.examples == 'true' # Only run if changes were detected in the examples/dev directory
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Run tfsec for examples/dev
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: examples/dev
          soft_fail: true